package config

import (
	"encoding/json"
	"os"
	"path/filepath"
	"fmt"
	"time"

)


type AppConfig struct {
	Name        string `json:"name"`
	ProcessName string `json:"process_name"`
	Enabled     bool   `json:"enabled"`
}

type Config struct {
	// Application Moitoring
	Applications []AppConfig `json:"applications"`

	// checkpoint settings
	CheckpointInterval time.Duration	`json:"checkpoint_interval"`
	DataRententionDays int 		`json:"data_rentention_days"`

	// System settings
	AutoRestore bool `json:"auto_restore"`
	MaxRetryAttempts int `json:"max_retry_attempts"`
	LaunchDelayMs int `json:"launch_delay_ms"`

	// Paths
	DataDir string `json:"data_dir"`
	LogDir  string `json:"log_dir"`
	ConfigPath string `json:"config_path"`
}

var GlobalConfig *Config 

// DefaultConfig returns a config with sensible defaults
func DefaultConfig() *Config {
	homeDir, _ := os.UserHomeDir()
	dataDir := filepath.Join(homeDir, ".respawn")


	return &Config{	
		Applications: []AppConfig{
			{Name: "Google Chrome", ProcessName: "Google Chrome", Enabled: true},
            {Name: "Safari", ProcessName: "Safari", Enabled: true},
            {Name: "Brave Browser", ProcessName: "Brave Browser", Enabled: true},
            {Name: "TextEdit", ProcessName: "TextEdit", Enabled: true},
            {Name: "Firefox", ProcessName: "Firefox", Enabled: true},
            {Name: "Claude", ProcessName: "Claude", Enabled: true},
            {Name: "Preview", ProcessName: "Preview", Enabled: true},

		},

		CheckpointInterval: time.Hour, // 1 hour
		DataRententionDays: 7, // 7 days
		AutoRestore: true,
		MaxRetryAttempts: 3,
		LaunchDelayMs: 7000, // 7 seconds
		DataDir: dataDir,
		LogDir: filepath.Join(dataDir, "logs"),
		ConfigPath: filepath.Join(dataDir, "config.json"),
	}
}


